package com.ops.sc.ta.trans.datasource;


import com.ops.sc.common.enums.DatabaseType;
import com.ops.sc.common.exception.ScClientException;
import com.ops.sc.ta.trans.support.ScTransactionSupport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class JdbcDatabaseResource implements DatabaseResource {
    private static final Logger LOGGER = LoggerFactory.getLogger(JdbcDatabaseResource.class);

    private ProxyFactory proxyFactory;
    private Connection connection;
    private ScTransactionSupport scTransactionSupport;
    private ScDataSource scDataSource;

    public JdbcDatabaseResource(Connection connection, ScTransactionSupport scTransactionSupport,
                                ProxyFactory proxyFactory, ScDataSource scDataSource) {
        this.scTransactionSupport = scTransactionSupport;
        this.proxyFactory = proxyFactory;
        this.connection = connection;
        this.scDataSource = scDataSource;
    }

    public static Connection unwrapProxy(Connection connection) {
        if (JdbcDatabaseResource.class.equals(connection.getClass())) {
            return ((JdbcDatabaseResource) connection).getOriginalConnection();
        }
        return connection;
    }

    @Override
    public ScDataSource getDataSource() {
        return scDataSource;
    }

    @Override
    public Connection getOriginalConnection() {
        return connection;
    }

    @Override
    public void begin() throws SQLException {
        if (this.getAutoCommit()) {
            this.setAutoCommit(false);
        }

    }

    @Override
    public void end() throws SQLException {
        this.setAutoCommit(true);
        DataSourceUtils.releaseConnection(this, scDataSource);

        if (this.isClosed()) {
            LOGGER.debug("Close connection success: {}", this);
        } else {
            LOGGER.error("Close connection fail");
            throw new SQLException("Close connection fail");
        }
    }

    @Override
    public DatabaseMetaData getDBMetaData() throws ScClientException,SQLException {
        DatabaseType dbType = scDataSource.getDbType();
        if (DatabaseType.isConnectionReturnMeta(dbType)) {
            return connection.getMetaData();
        } else {
            return new MetaData(scDataSource.getUrl());
        }
    }

    @Override
    public void commit() throws SQLException {
        try {
            scTransactionSupport.beforeCommit(this);
            try {
                connection.commit();
            } finally {
                clearResource();
            }
        }catch (ScClientException e){
            throw new SQLException(e);
        }
    }

    @Override
    public void rollback() throws SQLException {
        try {
            connection.rollback();
        } finally {
            clearResource();
        }
    }

    private void clearResource() {
        scTransactionSupport.afterTransactionEnd();
        // for next transaction
        scTransactionSupport.beforeTransactionStart();
    }

    @Override
    public Statement createStatement() throws SQLException {
        return proxyFactory.newStatementProxy(connection.createStatement(), scDataSource, this);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return proxyFactory.newStatementProxy(connection.createStatement(resultSetType, resultSetConcurrency),
                scDataSource, this);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return proxyFactory.newStatementProxy(
                connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), scDataSource,
                this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return proxyFactory.newPreparedStatementProxy(connection.prepareStatement(sql), sql, scDataSource, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return proxyFactory.newPreparedStatementProxy(connection.prepareStatement(sql, autoGeneratedKeys), sql,
                scDataSource, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return proxyFactory.newPreparedStatementProxy(connection.prepareStatement(sql, columnIndexes), sql,
                scDataSource, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return proxyFactory.newPreparedStatementProxy(connection.prepareStatement(sql, columnNames), sql,
                scDataSource, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        return proxyFactory.newPreparedStatementProxy(
                connection.prepareStatement(sql, resultSetType, resultSetConcurrency), sql, scDataSource, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return proxyFactory.newPreparedStatementProxy(
                connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql,
                scDataSource, this);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return connection.prepareCall(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return connection.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return connection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        return connection.nativeSQL(sql);
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        return connection.getAutoCommit();
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        connection.setAutoCommit(autoCommit);
        if (!autoCommit) {
            scTransactionSupport.beforeTransactionStart();
        }
    }

    @Override
    public void close() throws SQLException {
        // 事务管理器分离，不用作特殊适配
        connection.close();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return connection.isClosed();
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return connection.getMetaData();
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        return connection.isReadOnly();
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        connection.setReadOnly(readOnly);
    }

    @Override
    public String getCatalog() throws SQLException {
        return connection.getCatalog();
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        connection.setCatalog(catalog);
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        return connection.getTransactionIsolation();
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        connection.setTransactionIsolation(level);
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return connection.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        connection.clearWarnings();
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return connection.getTypeMap();
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        connection.setTypeMap(map);
    }

    @Override
    public int getHoldability() throws SQLException {
        return connection.getHoldability();
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
        connection.setHoldability(holdability);
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        return connection.setSavepoint();
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        return connection.setSavepoint(name);
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        connection.rollback(savepoint);
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        connection.releaseSavepoint(savepoint);
    }

    @Override
    public Clob createClob() throws SQLException {
        return connection.createClob();
    }

    @Override
    public Blob createBlob() throws SQLException {
        return connection.createBlob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        return connection.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        return connection.createSQLXML();
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return connection.isValid(timeout);
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        connection.setClientInfo(name, value);
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        return connection.getClientInfo(name);
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        return connection.getClientInfo();
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        connection.setClientInfo(properties);
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return connection.createArrayOf(typeName, elements);
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return connection.createStruct(typeName, attributes);
    }

    @Override
    public String getSchema() throws SQLException {
        return connection.getSchema();
    }

    @Override
    public void setSchema(String schema) throws SQLException {
        connection.setSchema(schema);
    }

    @Override
    public void abort(Executor executor) throws SQLException {
        connection.abort(executor);
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        connection.setNetworkTimeout(executor, milliseconds);
    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        return connection.getNetworkTimeout();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return connection.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return connection.isWrapperFor(iface);
    }
}
