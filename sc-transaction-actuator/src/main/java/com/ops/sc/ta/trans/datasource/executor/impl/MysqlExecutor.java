package com.ops.sc.ta.trans.datasource.executor.impl;


import com.ops.sc.common.enums.ClientErrorCode;
import com.ops.sc.common.enums.DatabaseType;
import com.ops.sc.common.exception.ScClientException;
import com.ops.sc.ta.clone.dto.PrimaryKVInfo;
import com.ops.sc.ta.clone.dto.SqlInfo;
import com.ops.sc.ta.trans.datasource.executor.DbExecutorFactory;
import com.ops.sc.ta.trans.datasource.BaseStatementProxy;
import com.ops.sc.ta.trans.datasource.DatabaseResource;
import com.ops.sc.ta.trans.datasource.ScDataSource;
import com.ops.sc.ta.trans.datasource.SqlParserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


@Component("mysqlExecutor")
public class MysqlExecutor extends AbstractDbExecutor {

    private static final int PRIMARY_KEY_COLUMN_INDEX = 1;

    private static final String PRIMARY_KEY_COLUMN_LABEL = "COLUMN_NAME";

    private static final String AUTO_INCREMENT_SPECIAL_VALUE = "0";

    private static final Logger LOGGER = LoggerFactory.getLogger(MysqlExecutor.class);

    @PostConstruct
    public void init() {
        DbExecutorFactory.registerDbExecutor(DatabaseType.MYSQL, this);
    }

    @Override
    public Long generateID(ScDataSource scDataSource, String tableName) {
        return null;
    }

    @Override
    public Long generateID(Connection connection, String tableName) {
        return null;
    }

    @Override
    protected SqlInfo parseSql(String sql) throws ScClientException{
        return SqlParserService.parseSqlInfo(sql);
    }

    @Override
    protected List<String> doGetPrimaryKeyFields(DatabaseResource databaseResource, String tableName) throws ScClientException,SQLException {
        Connection connection = databaseResource.getOriginalConnection();
        List<String> primaryKeyList = new ArrayList<>();
        Statement stmt = null;
        ResultSet queryRs;
        String catalog;
        String schema;
        try {
            stmt = connection.createStatement();
            queryRs = stmt.executeQuery("SELECT * FROM " + tableName + " WHERE 1=0");
            try {
                ResultSetMetaData rsmd = queryRs.getMetaData();
                catalog = rsmd.getCatalogName(1);
                schema = rsmd.getSchemaName(1);
            } finally {
                if (queryRs != null) {
                    queryRs.close();
                }
            }
        } finally {
            if (stmt != null) {
                stmt.close();
            }
        }

        try (ResultSet rs = connection.getMetaData().getPrimaryKeys(catalog, schema, tableName)) {

            if (rs != null && rs.isBeforeFirst()) {
                while (rs.next()) {
                    primaryKeyList.add(rs.getString(PRIMARY_KEY_COLUMN_LABEL));
                }
            }
        }
        LOGGER.debug("Table: {} , primary key list: {}", tableName, primaryKeyList);
        return primaryKeyList;
    }

    @Override
    protected void getInsertPrimaryKeyValue(BaseStatementProxy stmtProxy, SqlInfo sqlInfo) throws ScClientException,SQLException {

        Set<PrimaryKVInfo> pkValueInfoSet = sqlInfo.parseSqlToGetPrimaryKeyValueInfo();

        Set<String> pkValueSet = new HashSet<>();
        for (PrimaryKVInfo pkValueInfo : pkValueInfoSet) {
            pkValueSet.add(pkValueInfo.getPkValueExpression().toString());
        }
        sqlInfo.setPrimaryKeyValueSet(pkValueSet);

        if (isPkValueInvalid(sqlInfo)) {
            ResultSet rs = null;

            try {
                try {
                    rs = stmtProxy.getTargetStatement().getGeneratedKeys();
                } catch (SQLException e) {
                    if ("S1009".equalsIgnoreCase(e.getSQLState())) {
                        rs = stmtProxy.getTargetStatement().executeQuery("SELECT LAST_INSERT_ID()");
                    } else {
                        throw e;
                    }
                }
                if (rs == null || !rs.isBeforeFirst()) {
                    throw new ScClientException(ClientErrorCode.UNSUPPORTED_DATABASE,
                            "Can not get autoGeneratedKeys ");
                }
                sqlInfo.getPrimaryKeyValueSet().clear();
                while (rs.next()) {
                    String id = rs.getString(PRIMARY_KEY_COLUMN_INDEX);
                    if (AUTO_INCREMENT_SPECIAL_VALUE.equals(id)) {
                        throw new ScClientException(ClientErrorCode.UNSUPPORTED_DATABASE,
                                "Db version not support");
                    }
                    sqlInfo.getPrimaryKeyValueSet().add(id);
                }
                LOGGER.debug("Get primary key value from stmt.getGeneratedKeys");
            } finally {
                if (rs != null) {
                    rs.close();
                }
            }
        }

        LOGGER.debug("Insert sql: {}, pkValue: {}", sqlInfo.getSql(), sqlInfo.getPrimaryKeyValueSet());
    }

    @Override
    protected boolean shouldInvokeSqlWithoutSc(SqlInfo sqlInfo) {
        return false;
    }

    protected boolean isPkValueInvalid(SqlInfo sqlInfo) {
        return sqlInfo.getPrimaryKeyValueSet().isEmpty()
                || sqlInfo.getPrimaryKeyValueSet().contains(AUTO_INCREMENT_SPECIAL_VALUE);
    }
}
