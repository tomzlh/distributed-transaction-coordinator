package com.ops.sc.ta.trans.datasource;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class JdbcPreparedStatementProxy extends BasePreparedStatementProxy {

    public JdbcPreparedStatementProxy(PreparedStatement preparedStatement, String sql, ScDataSource scDataSource,
            DatabaseResource databaseResource) {
        super(preparedStatement, sql, scDataSource, databaseResource);
    }

    @Override
    public boolean execute() throws SQLException {
        final String fullSql = getFullSql();
        return StatementTemplate.execute(this, fullSql, () -> getPreparedStatement().execute());
    }

    @Override
    public int executeUpdate() throws SQLException {
        final String fullSql = getFullSql();
        return StatementTemplate.execute(this, fullSql, () -> getPreparedStatement().executeUpdate());
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        final String fullSql = getFullSql();
        return StatementTemplate.execute(this, fullSql, () -> getPreparedStatement().executeQuery());
    }

    // 以下方法jdbc preparedStatement不支持
    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return getPreparedStatement().executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return getPreparedStatement().executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return getPreparedStatement().executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return getPreparedStatement().execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return getPreparedStatement().execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return getPreparedStatement().execute(sql, columnNames);
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return getPreparedStatement().executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return getPreparedStatement().executeUpdate(sql);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return getPreparedStatement().execute(sql);
    }

}
