// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transLifeManager.proto

package com.ops.sc.rpc.grpc;

/**
 * Protobuf service {@code TransactionManager}
 */
public  abstract class TransactionManager
    implements com.google.protobuf.Service {
  protected TransactionManager() {}

  public interface Interface {
    /**
     * <code>rpc startBranchTrans(.BranchTransRequest) returns (.BranchTransResponse);</code>
     */
    public abstract void startBranchTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.BranchTransRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.BranchTransResponse> done);

    /**
     * <code>rpc startGlobalTrans(.GlobalTransRequest) returns (.GlobalTransResponse);</code>
     */
    public abstract void startGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalTransRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalTransResponse> done);

    /**
     * <code>rpc startSagaGlobalTrans(.GlobalSagaTransRequest) returns (.GlobalSagaTransResponse);</code>
     */
    public abstract void startSagaGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalSagaTransRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalSagaTransResponse> done);

    /**
     * <code>rpc rollbackGlobalTrans(.GlobalTransRollbackRequest) returns (.GlobalTransRollbackResponse);</code>
     */
    public abstract void rollbackGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalTransRollbackRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalTransRollbackResponse> done);

    /**
     * <code>rpc regTransMsg(.RegTransMsgRequest) returns (.RegTransMsgResponse);</code>
     */
    public abstract void regTransMsg(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.RegTransMsgRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.RegTransMsgResponse> done);

    /**
     * <code>rpc registerProducer(.MQProducerRegRequest) returns (.MQProducerRegResponse);</code>
     */
    public abstract void registerProducer(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.MQProducerRegRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.MQProducerRegResponse> done);

    /**
     * <code>rpc stateCheck(.StateServiceRequest) returns (.StateServiceResponse);</code>
     */
    public abstract void stateCheck(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.StateServiceRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.StateServiceResponse> done);

    /**
     * <code>rpc findGlobalTrans(.TransQueryRequest) returns (.TransQueryResponse);</code>
     */
    public abstract void findGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.TransQueryRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.TransQueryResponse> done);

    /**
     * <code>rpc executeBranchTrans(.BranchTransRequest) returns (.BranchTransResponse);</code>
     */
    public abstract void executeBranchTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.BranchTransRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.BranchTransResponse> done);

    /**
     * <code>rpc compensateTrans(.TransCompensationRequest) returns (.TransCompensationResponse);</code>
     */
    public abstract void compensateTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.TransCompensationRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.TransCompensationResponse> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new TransactionManager() {
      @java.lang.Override
      public  void startBranchTrans(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.BranchTransRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.BranchTransResponse> done) {
        impl.startBranchTrans(controller, request, done);
      }

      @java.lang.Override
      public  void startGlobalTrans(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.GlobalTransRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalTransResponse> done) {
        impl.startGlobalTrans(controller, request, done);
      }

      @java.lang.Override
      public  void startSagaGlobalTrans(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.GlobalSagaTransRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalSagaTransResponse> done) {
        impl.startSagaGlobalTrans(controller, request, done);
      }

      @java.lang.Override
      public  void rollbackGlobalTrans(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.GlobalTransRollbackRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalTransRollbackResponse> done) {
        impl.rollbackGlobalTrans(controller, request, done);
      }

      @java.lang.Override
      public  void regTransMsg(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.RegTransMsgRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.RegTransMsgResponse> done) {
        impl.regTransMsg(controller, request, done);
      }

      @java.lang.Override
      public  void registerProducer(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.MQProducerRegRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.MQProducerRegResponse> done) {
        impl.registerProducer(controller, request, done);
      }

      @java.lang.Override
      public  void stateCheck(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.StateServiceRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.StateServiceResponse> done) {
        impl.stateCheck(controller, request, done);
      }

      @java.lang.Override
      public  void findGlobalTrans(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.TransQueryRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.TransQueryResponse> done) {
        impl.findGlobalTrans(controller, request, done);
      }

      @java.lang.Override
      public  void executeBranchTrans(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.BranchTransRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.BranchTransResponse> done) {
        impl.executeBranchTrans(controller, request, done);
      }

      @java.lang.Override
      public  void compensateTrans(
          com.google.protobuf.RpcController controller,
          com.ops.sc.rpc.dto.TransCompensationRequest request,
          com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.TransCompensationResponse> done) {
        impl.compensateTrans(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.startBranchTrans(controller, (com.ops.sc.rpc.dto.BranchTransRequest)request);
          case 1:
            return impl.startGlobalTrans(controller, (com.ops.sc.rpc.dto.GlobalTransRequest)request);
          case 2:
            return impl.startSagaGlobalTrans(controller, (com.ops.sc.rpc.dto.GlobalSagaTransRequest)request);
          case 3:
            return impl.rollbackGlobalTrans(controller, (com.ops.sc.rpc.dto.GlobalTransRollbackRequest)request);
          case 4:
            return impl.regTransMsg(controller, (com.ops.sc.rpc.dto.RegTransMsgRequest)request);
          case 5:
            return impl.registerProducer(controller, (com.ops.sc.rpc.dto.MQProducerRegRequest)request);
          case 6:
            return impl.stateCheck(controller, (com.ops.sc.rpc.dto.StateServiceRequest)request);
          case 7:
            return impl.findGlobalTrans(controller, (com.ops.sc.rpc.dto.TransQueryRequest)request);
          case 8:
            return impl.executeBranchTrans(controller, (com.ops.sc.rpc.dto.BranchTransRequest)request);
          case 9:
            return impl.compensateTrans(controller, (com.ops.sc.rpc.dto.TransCompensationRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.ops.sc.rpc.dto.BranchTransRequest.getDefaultInstance();
          case 1:
            return com.ops.sc.rpc.dto.GlobalTransRequest.getDefaultInstance();
          case 2:
            return com.ops.sc.rpc.dto.GlobalSagaTransRequest.getDefaultInstance();
          case 3:
            return com.ops.sc.rpc.dto.GlobalTransRollbackRequest.getDefaultInstance();
          case 4:
            return com.ops.sc.rpc.dto.RegTransMsgRequest.getDefaultInstance();
          case 5:
            return com.ops.sc.rpc.dto.MQProducerRegRequest.getDefaultInstance();
          case 6:
            return com.ops.sc.rpc.dto.StateServiceRequest.getDefaultInstance();
          case 7:
            return com.ops.sc.rpc.dto.TransQueryRequest.getDefaultInstance();
          case 8:
            return com.ops.sc.rpc.dto.BranchTransRequest.getDefaultInstance();
          case 9:
            return com.ops.sc.rpc.dto.TransCompensationRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance();
          case 1:
            return com.ops.sc.rpc.dto.GlobalTransResponse.getDefaultInstance();
          case 2:
            return com.ops.sc.rpc.dto.GlobalSagaTransResponse.getDefaultInstance();
          case 3:
            return com.ops.sc.rpc.dto.GlobalTransRollbackResponse.getDefaultInstance();
          case 4:
            return com.ops.sc.rpc.dto.RegTransMsgResponse.getDefaultInstance();
          case 5:
            return com.ops.sc.rpc.dto.MQProducerRegResponse.getDefaultInstance();
          case 6:
            return com.ops.sc.rpc.dto.StateServiceResponse.getDefaultInstance();
          case 7:
            return com.ops.sc.rpc.dto.TransQueryResponse.getDefaultInstance();
          case 8:
            return com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance();
          case 9:
            return com.ops.sc.rpc.dto.TransCompensationResponse.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc startBranchTrans(.BranchTransRequest) returns (.BranchTransResponse);</code>
   */
  public abstract void startBranchTrans(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.BranchTransRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.BranchTransResponse> done);

  /**
   * <code>rpc startGlobalTrans(.GlobalTransRequest) returns (.GlobalTransResponse);</code>
   */
  public abstract void startGlobalTrans(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.GlobalTransRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalTransResponse> done);

  /**
   * <code>rpc startSagaGlobalTrans(.GlobalSagaTransRequest) returns (.GlobalSagaTransResponse);</code>
   */
  public abstract void startSagaGlobalTrans(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.GlobalSagaTransRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalSagaTransResponse> done);

  /**
   * <code>rpc rollbackGlobalTrans(.GlobalTransRollbackRequest) returns (.GlobalTransRollbackResponse);</code>
   */
  public abstract void rollbackGlobalTrans(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.GlobalTransRollbackRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalTransRollbackResponse> done);

  /**
   * <code>rpc regTransMsg(.RegTransMsgRequest) returns (.RegTransMsgResponse);</code>
   */
  public abstract void regTransMsg(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.RegTransMsgRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.RegTransMsgResponse> done);

  /**
   * <code>rpc registerProducer(.MQProducerRegRequest) returns (.MQProducerRegResponse);</code>
   */
  public abstract void registerProducer(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.MQProducerRegRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.MQProducerRegResponse> done);

  /**
   * <code>rpc stateCheck(.StateServiceRequest) returns (.StateServiceResponse);</code>
   */
  public abstract void stateCheck(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.StateServiceRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.StateServiceResponse> done);

  /**
   * <code>rpc findGlobalTrans(.TransQueryRequest) returns (.TransQueryResponse);</code>
   */
  public abstract void findGlobalTrans(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.TransQueryRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.TransQueryResponse> done);

  /**
   * <code>rpc executeBranchTrans(.BranchTransRequest) returns (.BranchTransResponse);</code>
   */
  public abstract void executeBranchTrans(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.BranchTransRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.BranchTransResponse> done);

  /**
   * <code>rpc compensateTrans(.TransCompensationRequest) returns (.TransCompensationResponse);</code>
   */
  public abstract void compensateTrans(
      com.google.protobuf.RpcController controller,
      com.ops.sc.rpc.dto.TransCompensationRequest request,
      com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.TransCompensationResponse> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.ops.sc.rpc.grpc.TMService.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.startBranchTrans(controller, (com.ops.sc.rpc.dto.BranchTransRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.BranchTransResponse>specializeCallback(
            done));
        return;
      case 1:
        this.startGlobalTrans(controller, (com.ops.sc.rpc.dto.GlobalTransRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.GlobalTransResponse>specializeCallback(
            done));
        return;
      case 2:
        this.startSagaGlobalTrans(controller, (com.ops.sc.rpc.dto.GlobalSagaTransRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.GlobalSagaTransResponse>specializeCallback(
            done));
        return;
      case 3:
        this.rollbackGlobalTrans(controller, (com.ops.sc.rpc.dto.GlobalTransRollbackRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.GlobalTransRollbackResponse>specializeCallback(
            done));
        return;
      case 4:
        this.regTransMsg(controller, (com.ops.sc.rpc.dto.RegTransMsgRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.RegTransMsgResponse>specializeCallback(
            done));
        return;
      case 5:
        this.registerProducer(controller, (com.ops.sc.rpc.dto.MQProducerRegRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.MQProducerRegResponse>specializeCallback(
            done));
        return;
      case 6:
        this.stateCheck(controller, (com.ops.sc.rpc.dto.StateServiceRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.StateServiceResponse>specializeCallback(
            done));
        return;
      case 7:
        this.findGlobalTrans(controller, (com.ops.sc.rpc.dto.TransQueryRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.TransQueryResponse>specializeCallback(
            done));
        return;
      case 8:
        this.executeBranchTrans(controller, (com.ops.sc.rpc.dto.BranchTransRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.BranchTransResponse>specializeCallback(
            done));
        return;
      case 9:
        this.compensateTrans(controller, (com.ops.sc.rpc.dto.TransCompensationRequest)request,
          com.google.protobuf.RpcUtil.<com.ops.sc.rpc.dto.TransCompensationResponse>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.ops.sc.rpc.dto.BranchTransRequest.getDefaultInstance();
      case 1:
        return com.ops.sc.rpc.dto.GlobalTransRequest.getDefaultInstance();
      case 2:
        return com.ops.sc.rpc.dto.GlobalSagaTransRequest.getDefaultInstance();
      case 3:
        return com.ops.sc.rpc.dto.GlobalTransRollbackRequest.getDefaultInstance();
      case 4:
        return com.ops.sc.rpc.dto.RegTransMsgRequest.getDefaultInstance();
      case 5:
        return com.ops.sc.rpc.dto.MQProducerRegRequest.getDefaultInstance();
      case 6:
        return com.ops.sc.rpc.dto.StateServiceRequest.getDefaultInstance();
      case 7:
        return com.ops.sc.rpc.dto.TransQueryRequest.getDefaultInstance();
      case 8:
        return com.ops.sc.rpc.dto.BranchTransRequest.getDefaultInstance();
      case 9:
        return com.ops.sc.rpc.dto.TransCompensationRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance();
      case 1:
        return com.ops.sc.rpc.dto.GlobalTransResponse.getDefaultInstance();
      case 2:
        return com.ops.sc.rpc.dto.GlobalSagaTransResponse.getDefaultInstance();
      case 3:
        return com.ops.sc.rpc.dto.GlobalTransRollbackResponse.getDefaultInstance();
      case 4:
        return com.ops.sc.rpc.dto.RegTransMsgResponse.getDefaultInstance();
      case 5:
        return com.ops.sc.rpc.dto.MQProducerRegResponse.getDefaultInstance();
      case 6:
        return com.ops.sc.rpc.dto.StateServiceResponse.getDefaultInstance();
      case 7:
        return com.ops.sc.rpc.dto.TransQueryResponse.getDefaultInstance();
      case 8:
        return com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance();
      case 9:
        return com.ops.sc.rpc.dto.TransCompensationResponse.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.ops.sc.rpc.grpc.TransactionManager implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void startBranchTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.BranchTransRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.BranchTransResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.BranchTransResponse.class,
          com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance()));
    }

    public  void startGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalTransRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalTransResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.ops.sc.rpc.dto.GlobalTransResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.GlobalTransResponse.class,
          com.ops.sc.rpc.dto.GlobalTransResponse.getDefaultInstance()));
    }

    public  void startSagaGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalSagaTransRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalSagaTransResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.ops.sc.rpc.dto.GlobalSagaTransResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.GlobalSagaTransResponse.class,
          com.ops.sc.rpc.dto.GlobalSagaTransResponse.getDefaultInstance()));
    }

    public  void rollbackGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalTransRollbackRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.GlobalTransRollbackResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.ops.sc.rpc.dto.GlobalTransRollbackResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.GlobalTransRollbackResponse.class,
          com.ops.sc.rpc.dto.GlobalTransRollbackResponse.getDefaultInstance()));
    }

    public  void regTransMsg(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.RegTransMsgRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.RegTransMsgResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.ops.sc.rpc.dto.RegTransMsgResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.RegTransMsgResponse.class,
          com.ops.sc.rpc.dto.RegTransMsgResponse.getDefaultInstance()));
    }

    public  void registerProducer(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.MQProducerRegRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.MQProducerRegResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.ops.sc.rpc.dto.MQProducerRegResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.MQProducerRegResponse.class,
          com.ops.sc.rpc.dto.MQProducerRegResponse.getDefaultInstance()));
    }

    public  void stateCheck(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.StateServiceRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.StateServiceResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        com.ops.sc.rpc.dto.StateServiceResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.StateServiceResponse.class,
          com.ops.sc.rpc.dto.StateServiceResponse.getDefaultInstance()));
    }

    public  void findGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.TransQueryRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.TransQueryResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        com.ops.sc.rpc.dto.TransQueryResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.TransQueryResponse.class,
          com.ops.sc.rpc.dto.TransQueryResponse.getDefaultInstance()));
    }

    public  void executeBranchTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.BranchTransRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.BranchTransResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(8),
        controller,
        request,
        com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.BranchTransResponse.class,
          com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance()));
    }

    public  void compensateTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.TransCompensationRequest request,
        com.google.protobuf.RpcCallback<com.ops.sc.rpc.dto.TransCompensationResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(9),
        controller,
        request,
        com.ops.sc.rpc.dto.TransCompensationResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.ops.sc.rpc.dto.TransCompensationResponse.class,
          com.ops.sc.rpc.dto.TransCompensationResponse.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.ops.sc.rpc.dto.BranchTransResponse startBranchTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.BranchTransRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.GlobalTransResponse startGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalTransRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.GlobalSagaTransResponse startSagaGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalSagaTransRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.GlobalTransRollbackResponse rollbackGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalTransRollbackRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.RegTransMsgResponse regTransMsg(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.RegTransMsgRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.MQProducerRegResponse registerProducer(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.MQProducerRegRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.StateServiceResponse stateCheck(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.StateServiceRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.TransQueryResponse findGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.TransQueryRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.BranchTransResponse executeBranchTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.BranchTransRequest request)
        throws com.google.protobuf.ServiceException;

    public com.ops.sc.rpc.dto.TransCompensationResponse compensateTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.TransCompensationRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.ops.sc.rpc.dto.BranchTransResponse startBranchTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.BranchTransRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.BranchTransResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.GlobalTransResponse startGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalTransRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.GlobalTransResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.ops.sc.rpc.dto.GlobalTransResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.GlobalSagaTransResponse startSagaGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalSagaTransRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.GlobalSagaTransResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.ops.sc.rpc.dto.GlobalSagaTransResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.GlobalTransRollbackResponse rollbackGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.GlobalTransRollbackRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.GlobalTransRollbackResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.ops.sc.rpc.dto.GlobalTransRollbackResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.RegTransMsgResponse regTransMsg(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.RegTransMsgRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.RegTransMsgResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.ops.sc.rpc.dto.RegTransMsgResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.MQProducerRegResponse registerProducer(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.MQProducerRegRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.MQProducerRegResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.ops.sc.rpc.dto.MQProducerRegResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.StateServiceResponse stateCheck(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.StateServiceRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.StateServiceResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        com.ops.sc.rpc.dto.StateServiceResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.TransQueryResponse findGlobalTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.TransQueryRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.TransQueryResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        com.ops.sc.rpc.dto.TransQueryResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.BranchTransResponse executeBranchTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.BranchTransRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.BranchTransResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(8),
        controller,
        request,
        com.ops.sc.rpc.dto.BranchTransResponse.getDefaultInstance());
    }


    public com.ops.sc.rpc.dto.TransCompensationResponse compensateTrans(
        com.google.protobuf.RpcController controller,
        com.ops.sc.rpc.dto.TransCompensationRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.ops.sc.rpc.dto.TransCompensationResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(9),
        controller,
        request,
        com.ops.sc.rpc.dto.TransCompensationResponse.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:TransactionManager)
}

